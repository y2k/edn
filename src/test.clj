(ns test (:require ["./main" :as m]))

(defn- assert [loc expected actual]
  (if (= expected actual)
    (println "SUCCESS:" actual)
    (FIXME loc "\n- Expected: " expected " [" (type expected) "]\n-   Actual: " actual " [" (type actual) "]")))

(assert __LOC__ "{:a \"\\\\a\\\\b\\\\\"}" (m/to_string {:a "\\a\\b\\"}))
(assert __LOC__ "{:a \"a b\"}" (m/to_string {:a "a b"}))
(assert __LOC__ "{:a \"a\\\"b\\\"c\"}" (m/to_string {:a "a\"b\"c"}))
(assert __LOC__ "1" (m/to_string 1))
(assert __LOC__ "{:a nil}" (m/to_string {:a nil}))
(assert __LOC__ "\"1\"" (m/to_string "1"))
(assert __LOC__ "[]" (m/to_string []))
(assert __LOC__ "{}" (m/to_string {}))
(assert __LOC__ "[1]" (m/to_string [1]))
(assert __LOC__ "[1 2]" (m/to_string [1 2]))
(assert __LOC__ "[1 [3 4] 2]" (m/to_string [1 [3 4] 2]))
(assert __LOC__ "{:a 3}" (m/to_string {:a 3}))
(assert __LOC__ "{:a 2 :b 4}" (m/to_string {:a 2 :b 4}))
(assert __LOC__ "{:a {:b 2 :c 4} :d 4}" (m/to_string {:a {:b 2 :c 4} :d 4}))
(assert __LOC__ "[:use_r1 :pe2pe :user \"us er\" \"pepe \"]"
        (m/to_string [:use_r1 :pe2pe "user" "us er" "pepe "]))
;; (assert "(1 2)" (m/to_string (list 1 2)))
;; (assert "(\"1\" 2)" (m/to_string (list "1" 2)))
;; (assert "(a b)" (m/to_string (list (quote a) (quote b))))
;; (assert "(a b)" (m/to_string (quote (a b))))
